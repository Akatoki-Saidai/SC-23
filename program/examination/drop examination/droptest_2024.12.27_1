# SC-23/program/bbm/にあるbno055とbme280のコードを参考にして
# 下記の落下フェーズのコードを変更して完成させてみてください
# ∵実際に動いたから
# bbmのコードを実行した様子は#プログラミングで確認できますので、
# そのコードのどこを変えたら、例えば取得値を返す関数になるのかとかを考えて書いてみてください。
# お願いします。

# 下のコードを変えてください。

####################################################################################################

# import一覧
import random                                                                                    # randomモジュールをインポートします。機体のランダムな動きをシミュレートするために使用されます。
import time

default_y_accel = random.uniform(-0.05,0.05)                                                     # 機体の初期y軸加速度を0.0に設定します。地球上では最初は静止していることを表します。
y_accel = default_y_accel                                                                        # 現在のy軸加速度を初期値で初期化します。
default_height = 30                                                                              # 機体の初期高度を30メートルに設定します。
i = 1                                                                                            # 時間ステップを表すカウンター変数を1で初期化します。

# 関数定義記述
def height_m_s(n):                                                                               # 機体の高度から速度を計算する関数を定義します。
    g = 9.8                                                                                      # 地球の重力加速度を9.8m/s^2に設定します。
    time_step = 0.05                                                                             # 時間間隔を0.05秒に設定します。シミュレーションの精度に影響します。

    current_time = n * time_step                                                                 # 現在の時刻を計算します。
    previous_time = (n - 1) * time_step if n > 1 else 0                                          # 前の時刻を計算します（n=1の場合は0）。
    previous_height = default_height - (0.5 * g * previous_time**2) if n > 1 else default_height # 前の高度を計算します（n=1の場合はdefault_height）。
    current_height = default_height - (0.5 * g * current_time**2)                                # 現在の高度を計算します。地球の重力により高度が減少します。
    delta_height = current_height - previous_height                                              # 高度の変化量を計算します。
    velocity = delta_height / time_step                                                          # 速度を計算します（高度の変化量 / 時間間隔）。

    return velocity

# 落下フェーズ開始～print("落下検出")
while True:                                                                                      # 無限ループを開始します。機体が落下するまでシミュレーションを続けます。
    ran = random.uniform(-1.0, 0.25)                                                             # -1.0から0.25の間の乱数を生成します。機体の動きにランダム性を加えます。
    y_accel += ran                                                                               # y軸加速度に乱数を足して更新します。機体の加速度が変化することをシミュレートします。
    print("y_accel = ", y_accel)
    print("height_m_s(i) = ", height_m_s(i))
    time.sleep(0.05)                                                                             # 0.05秒間プログラムを一時停止します。シミュレーションの速度を調整します。
    if (y_accel <= -5 and height_m_s(i) <= -5):                                                  # 機体の落下検知の条件をチェックします。加速度と速度が一定値以下になると落下と判定します。
        print("落下検知")
        break
    i = i + 1

####################################################################################################
